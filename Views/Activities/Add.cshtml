@model ActivityCreateViewModel

<form asp-action="Add" method="post">
    <div class="addingActivity" id="app">
        <div class="addingActivityPartPanel">
            <div class="form-group col-7 pe-5">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" v-model="titleInputQuery" v-on:input="fetchActivitiesTitles" v-on:blur="closeDropdown" />                
                <span asp-validation-for="Title" class="text-danger"></span>                                
                <ul v-if="highlightedTitles.length" class="titlesDropdown" v-cloak>
                    <li v-for="(title, index) in highlightedTitles" :key="index" v-on:mousedown="selectTitle(index)" v-html="title" />
                </ul>
            </div>

            <div class="form-group col-2">
                <label asp-for="Category" class="control-label"></label>                
                <select class="form-select" asp-for="Category">
                    <option v-for="(category, index) in categories" :key="index" :value="category" :selected="category == 'None'">{{category}}</option>
                </select>
                <span asp-validation-for="Category" class="text-danger"></span>
            </div>
        </div>

        <div class="addingActivityPartPanel">
            <div class="form-group mb-2 col-9">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>

        <div class="addingActivityPartPanel">
            <div class="timePartPanel col-7">
                <div class="form-group col-5">
                    <label asp-for="StartedAt" class="control-label"></label>
                    <input asp-for="StartedAt" v-model="startedAtDate" type="datetime-local" class="form-control" />
                    <span asp-validation-for="StartedAt" class="text-danger"></span>
                </div>

                <div>
                    <button type="button" v-on:click="setCurrentDate" class="btn btn-primary">NOW</button>
                </div>
            </div>

            <div class="form-group col-2">
                <label asp-for="DurationPlanned" class="control-label"></label>
                <input asp-for="DurationPlanned" type="time" class="form-control" />
                <span asp-validation-for="DurationPlanned" class="text-danger"></span>
            </div>
        </div>

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-7">
                    <div class="buttonsPanel mt-4">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts {
    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    titles: [],
                    categories: [],
                    highlightedTitles: [],
                    titleInputQuery: '',
                    startedAtDate: this.getLocalDateString(new Date())
                }
            },
            methods: {
                async fetchActivitiesTitles() {
                    //TODO - Check if words in current array contains new letter - if contains, dont call new fetch
                    try {
                        const encodedQuery = encodeURIComponent(this.titleInputQuery);
                        const response = await fetch(`/Activities/GetActivityTitles?query=${encodedQuery}`);
                        if(!response.ok){
                            throw new Error("Error on titles fetching");
                        }

                        this.titles = await response.json();
                        if(this.titleInputQuery.length > 0) {
                            this.highlightedTitles = this.titles.map(title => {
                                return `<strong>${title.slice(0, this.titleInputQuery.length)}</strong>${title.slice(this.titleInputQuery.length)}`
                            });
                        }
                        else {
                            this.closeDropdown();
                        }
                    }
                    catch(error) {
                        console.log("Error: " + error);
                    }
                },
                async fetchCategories() {
                    try{
                        const response = await fetch(`/Activities/GetCategories`);
                        if(!response.ok){
                            throw new Error("Error on categories fetching");
                        }

                        this.categories = await response.json();
                    }
                    catch(error){
                        console.log("Error: " + error);
                    }
                },
                selectTitle(index) {
                    if(this.titles[index] != null)
                        this.titleInputQuery = this.titles[index];
                    else
                        this.titleInputQuery = "";
                    this.closeDropdown();
                },
                closeDropdown() {
                    this.titles = [];
                    this.highlightedTitles = [];
                },
                setCurrentDate() {
                    const current = new Date();
                    this.startedAtDate = this.getLocalDateString(current);
                },
                getLocalDateString(date) {
                    const year = date.getFullYear();
                    const month = (date.getMonth() + 1).toString().padStart(2, "0");
                    const day = date.getDate().toString().padStart(2, "0");
                    const hours = date.getHours().toString().padStart(2, "0");
                    const minutes = date.getMinutes().toString().padStart(2, "0");

                    return `${year}-${month}-${day}T${hours}:${minutes}`;
                }
            },
            mounted() {
                this.fetchCategories();
            }
        }).mount("#app");
    </script>
}