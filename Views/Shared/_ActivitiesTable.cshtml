@model IEnumerable<Activity>

@{
    var caption = ViewBag.Caption ?? "Activities";
    var current = ViewBag.Current ?? false;
}

<div class="container">
    <div class="table-responsive" id="app">
        <table class="table table-bordered caption-top activities-table-fixed">
            <caption class="text-center mb-2 activities-table-caption"><strong>@caption</strong></caption>

            <tr class="table-primary">
                <th>@Html.DisplayNameFor(model => model.First().ActivityTitle.Title)</th>
                <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                <th>@Html.DisplayNameFor(model => model.First().StartedAt)</th>
                <th>@Html.DisplayNameFor(model => model.First().DurationPlanned)</th>
                <th />
            </tr>
            @foreach (var action in Model)
            {
                <tr>
                    <td>@action.ActivityTitle.Title</td>
                    @if (action.Description != string.Empty && action.Description != null)
                    {
                        <td>@action.Description</td>
                    }
                    else
                    {
                        <td>@action.ActivityTitle.Description</td>
                    }
                    <td>@action.StartedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    @if (current)
                    {                        
                        <td>
                            <span v-if="remainingTimes[@action.Id] !== undefined && remainingTimes[@action.Id] > 0">
                                {{ formatTime(elapsedTimes[@action.Id]) }} ( {{ formatTime(remainingTimes[@action.Id]) }} )
                            </span>                            
                            <span v-else>
                                Completed
                            </span>
                        </td>
                    }
                    else
                    {
                        <td>@action.DurationPlanned.ToString(@"hh\:mm")</td>
                    }
                    <td>
                        <div class="justify-content-center d-flex">
                            <a asp-controller="Activities" asp-action="Edit" asp-route-id="@action.Id" class="btn btn-primary me-2 w-50">Edit</a>
                            <a asp-controller="Activities" asp-action="Delete" asp-route-id="@action.Id" class="btn btn-danger w-50">Delete</a>
                        </div>
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

<script>
    const { createApp } = Vue;

    createApp({        
        data() {
            return {
                elapsedTimes: {},
                remainingTimes: {},
                activities: @Html.Raw(Json.Serialize(Model.Select(activity => new
                {
                    id = activity.Id,
                    startedAt = activity.StartedAt.ToString("yyyy-MM-ddTHH:mm:ss"),
                    totalDuration = activity.DurationPlanned.TotalSeconds
                })))
            }
        },
        methods: {         
            calculateTimes() {
                const now = new Date();

                this.activities.forEach(action => {
                    const startedAt = new Date(action.startedAt);
                    const totalDuration = parseInt(action.totalDuration, 10);

                    const elapsedSeconds = Math.floor((now - startedAt) / 1000);
                    const remainingSeconds = Math.max(0, totalDuration - elapsedSeconds);

                    this.elapsedTimes[action.id] = elapsedSeconds;
                    this.remainingTimes[action.id] = remainingSeconds;
                });                
            },
            formatTime(seconds) {
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;

                return  `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            }
        },
        mounted() {  
            this.calculateTimes();
            setInterval(this.calculateTimes, 1000);
        }
    }).mount("#app");
</script>