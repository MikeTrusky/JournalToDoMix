@model List<Activity>

@{
    ViewData["Title"] = "Activities";
    var caption = ViewBag.Caption ?? "Activities";
    var current = ViewBag.Current ?? false;
}

<div class="container-fluid">
    <div class="row" id="app">
        <div class="col-1 col-md-3 col-xl-2 px-sm-2 px-0 sideMenuMainContainer">
            <div class="d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-white min-vh-75">                                
                <ul class="nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start" id="sideMenu">
                    <li class="nav-item">
                        <a asp-controller="Activities" asp-action="Add" class="nav-link align-middle px-0">
                            <i class="fs-4 bi-window-plus"></i> <span class="ms-1 d-none d-sm-inline">Add activity</span>
                        </a>
                    </li>                    
                    <li>
                        <a href="#tableModeSideMenu" data-bs-toggle="collapse" class="nav-link px-0" v-on:click="collapseClick">
                            <i class="fs-4 bi-file-spreadsheet"></i><span class="ms-1 d-none d-sm-inline">Table mode</span><i v-if="collapseClicked" class="fs-5 m-4 bi-arrow-down-circle"></i>
                            <i v-if="!collapseClicked" class="fs-5 m-4 bi-arrow-up-circle" v-cloak></i>
                        </a>                        
                        <ul class="collapse flex-column ms-1" id="tableModeSideMenu" data-bs-parent="#sideMenu">
                            <li>
                                <a asp-controller="Activities" asp-action="Index" asp-route-activitiesType="Planned Activities" class="nav-link d-flex align-items-center gap-2 px-0">
                                    <i class="fs-5 bi-calendar-plus"></i><span class="d-none d-sm-inline">Planned</span>
                                </a>
                            </li>
                            <li>
                                <a asp-controller="Activities" asp-action="Index" asp-route-activitiesType="Current Activities" class="nav-link d-flex align-items-center gap-2 px-0">
                                    <i class="fs-5 bi-calendar-week"></i><span class="d-none d-sm-inline">Current</span>
                                </a>
                            </li>
                            <li>
                                <a asp-controller="Activities" asp-action="Index" asp-route-activitiesType="Previous Activities" class="nav-link d-flex align-items-center gap-2 px-0">
                                    <i class="fs-5 bi-calendar-check"></i><span class="d-none d-sm-inline">Previous</span>
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-10 col-md-8 col-xl-9 py-3">
            <div class="container">
                <div class="table-responsive">
                    <table class="table table-bordered caption-top activities-table-fixed">
                        <caption class="text-center mb-2 activities-table-caption"><strong>@caption</strong></caption>

                        <tr class="table-primary">
                            <th>@Html.DisplayNameFor(model => model.First().ActivityTitle.Title)</th>
                            <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                            <th>@Html.DisplayNameFor(model => model.First().StartedAt)</th>
                            <th>@Html.DisplayNameFor(model => model.First().DurationPlanned)</th>
                            <th />
                        </tr>
                        @foreach (var action in Model)
                        {
                            <tr>
                                <td>@action.ActivityTitle.Title</td>
                                @if (action.Description != string.Empty && action.Description != null)
                                {
                                    <td>@action.Description</td>
                                }
                                else
                                {
                                    <td>@action.ActivityTitle.Description</td>
                                }
                                <td>@action.StartedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                @if (current)
                                {
                                    <td>
                                        <span v-if="remainingTimes[@action.Id] !== undefined && remainingTimes[@action.Id] > 0">
                                            {{ formatTime(elapsedTimes[@action.Id]) }} ( {{ formatTime(remainingTimes[@action.Id]) }} )
                                        </span>
                                        <span v-else>
                                            Completed
                                        </span>
                                    </td>
                                }
                                else
                                {
                                    <td>@action.DurationPlanned.ToString(@"hh\:mm")</td>
                                }
                                <td>
                                    <div class="justify-content-center d-flex">
                                        <a asp-controller="Activities" asp-action="Edit" asp-route-id="@action.Id" class="btn btn-primary me-2 w-50">Edit</a>
                                        <a asp-controller="Activities" asp-action="Delete" asp-route-id="@action.Id" class="btn btn-danger w-50">Delete</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    elapsedTimes: {},
                    remainingTimes: {},
                    activities: @Html.Raw(Json.Serialize(Model.Select(activity => new
                    {
                        id = activity.Id,
                        startedAt = activity.StartedAt.ToString("yyyy-MM-ddTHH:mm:ss"),
                        totalDuration = activity.DurationPlanned.TotalSeconds
                    }))),
                    collapseClicked: true,
                }
            },
            methods: {
                calculateTimes() {
                    const now = new Date();

                    this.activities.forEach(action => {
                        const startedAt = new Date(action.startedAt);
                        const totalDuration = parseInt(action.totalDuration, 10);

                        const elapsedSeconds = Math.floor((now - startedAt) / 1000);
                        const remainingSeconds = Math.max(0, totalDuration - elapsedSeconds);

                        this.elapsedTimes[action.id] = elapsedSeconds;
                        this.remainingTimes[action.id] = remainingSeconds;
                    });
                },
                formatTime(seconds) {
                    const hours = Math.floor(seconds / 3600);
                    const minutes = Math.floor((seconds % 3600) / 60);
                    const secs = seconds % 60;

                    return  `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                },
                collapseClick() {                  
                    this.collapseClicked = !this.collapseClicked;
                },
            },
            mounted() {                
                this.calculateTimes();
                setInterval(this.calculateTimes, 1000);
            }
        }).mount("#app");
    </script>
}