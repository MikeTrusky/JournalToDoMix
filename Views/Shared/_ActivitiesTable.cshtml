@model IEnumerable<Activity>

@{
    var caption = ViewBag.Caption ?? "Activities";
    var current = ViewBag.Current ?? false;
}

<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered caption-top activities-table-fixed">
            <caption class="text-center mb-2 activities-table-caption"><strong>@caption</strong></caption>

            <tr class="table-info">
                <th>@Html.DisplayNameFor(model => model.First().Title)</th>
                <th>@Html.DisplayNameFor(model => model.First().Description)</th>
                <th>@Html.DisplayNameFor(model => model.First().StartedAt)</th>
                <th>@Html.DisplayNameFor(model => model.First().DurationPlanned)</th>
                <th />
            </tr>
            @foreach (var action in Model)
            {
                <tr>
                    <td>@action.Title</td>
                    <td>@action.Description</td>
                    <td>@action.StartedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    @if (current)
                    {
                        <td data-started-at="@action.StartedAt.ToString("yyy-MM-ddTHH:mm:ss")"
                            data-duration="@action.DurationPlanned.TotalSeconds"
                            class="time-elapsed">
                            00:00:00
                        </td>
                    }
                    else
                    {
                        <td>@action.DurationPlanned.ToString(@"hh\:mm")</td>
                    }                    
                    <td>
                        <div class="justify-content-center d-flex">
                            <a asp-controller="Activities" asp-action="Edit" asp-route-id="@action.Id" class="btn btn-secondary me-2 w-50">Edit</a>
                            <a asp-controller="Activities" asp-action="Delete" asp-route-id="@action.Id" class="btn btn-danger w-50">Delete</a>
                        </div>
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

<script>
    let isReloading = false;

    function updateTimeElapsed(){
        const rows = document.querySelectorAll('.time-elapsed');

        rows.forEach(function (row){
            const startedAt = new Date(row.getAttribute('data-started-at'));
            const totalDuration = parseInt(row.getAttribute('data-duration'), 10);

            const now = new Date();

            const elapsedSeconds = Math.floor((now - startedAt) / 1000);

            const remainingSeconds = totalDuration - elapsedSeconds;

            if (remainingSeconds <= 0) {
                row.textContent = "Completed";
                if(!isReloading){
                    isReloading = true;

                    setTimeout(function () {
                        location.reload();
                    }, 1000);
                }
            }
            else
            {
                const hoursElapsed = Math.floor(elapsedSeconds / 3600);
                const minutesElapsed = Math.floor((elapsedSeconds % 3600) / 60);
                const secondsElapsed = elapsedSeconds % 60;
                
                const hoursRemaining = Math.floor(remainingSeconds / 3600);
                const minutesRemaining = Math.floor((remainingSeconds % 3600) / 60);
                const secondsRemaining = remainingSeconds % 60;
                
                const formattedElapsedTime =
                    `${hoursElapsed.toString().padStart(2, '0')}:${minutesElapsed.toString().padStart(2, '0')}:${secondsElapsed.toString().padStart(2, '0')}`;

                const formattedRemainingTime =
                    `${hoursRemaining.toString().padStart(2, '0')}:${minutesRemaining.toString().padStart(2, '0')}:${secondsRemaining.toString().padStart(2, '0')}`;
                
                row.textContent = `${formattedElapsedTime} (${formattedRemainingTime})`;
            }
        });
    }

    setInterval(updateTimeElapsed, 1000);

    document.addEventListener("DOMContentLoaded", updateTimeElapsed);
</script>