@model ActivityCreateViewModel

<form asp-action="Add" method="post">
    <div class="form-group" id="app">
        <label asp-for="Title" class="control-label"></label>
        <input asp-for="Title" class="form-control" v-model="titleInputQuery" v-on:input="fetchActivitiesTitles" v-on:blur="closeDropdown" />
        <span asp-validation-for="Title" class="text-danger"></span>
        <ul v-if="highlightedTitles.length" class="titlesDropdown">
            <li v-for="(title, index) in highlightedTitles" :key="index" v-on:mousedown="selectTitle(index)" v-html="title" />            
        </ul>
    </div>

    <div class="form-group">
        <label asp-for="Category" class="control-label"></label>
        <input asp-for="Category" class="form-control" />
        <span asp-validation-for="Category" class="text-danger"></span>
    </div>

    <div class="form-group mb-2">
        <label asp-for="Description" class="control-label"></label>
        <input asp-for="Description" class="form-control" />
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="StartedAt" class="control-label"></label>
        <input asp-for="StartedAt" type="datetime-local" class="form-control" />
        <span asp-validation-for="StartedAt" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="DurationPlanned" class="control-label"></label>
        <input asp-for="DurationPlanned" type="time" class="form-control" />
        <span asp-validation-for="DurationPlanned" class="text-danger"></span>
    </div>

    <div class="container mt-3">
        <button type="submit" class="btn btn-primary">Save</button>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section scripts {
    <script>
        const { createApp } = Vue;

        createApp({
            data() {
                return {
                    titles: [],
                    highlightedTitles: [],
                    titleInputQuery: ''
                }
            },
            methods: {
                async fetchActivitiesTitles() {
                    //TODO - Check if words in current array contains new letter - if contains, dont call new fetch
                    try {
                        const encodedQuery = encodeURIComponent(this.titleInputQuery);
                        const response = await fetch(`/Activities/GetActivityTitles?query=${encodedQuery}`);
                        if(!response.ok){
                            throw new Error("Error on titles fetching");
                        }

                        this.titles = await response.json();
                        if(this.titleInputQuery.length > 0) {
                            this.highlightedTitles = this.titles.map(title => {
                                return `<strong>${title.slice(0, this.titleInputQuery.length)}</strong>${title.slice(this.titleInputQuery.length)}`
                            });
                        }                        
                        else {
                            this.closeDropdown();
                        }
                    }
                    catch(error) {
                        console.log("Error: " + error);
                    }
                },
                selectTitle(index) {
                    if(this.titles[index] != null)
                        this.titleInputQuery = this.titles[index];
                    else
                        this.titleInputQuery = "";
                    this.closeDropdown();
                },
                closeDropdown() {
                    this.titles = [];
                    this.highlightedTitles = [];
                }
            }
        }).mount("#app");
    </script>
}